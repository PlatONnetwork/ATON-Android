apply plugin: 'com.android.application'
apply plugin: 'realm-android'
apply plugin: 'org.sonarqube'
apply from: '../jacoco-report.gradle'

android {

    compileSdkVersion rootProject.ext.android.compileSdkVersion

    defaultConfig {

        applicationId "com.platon.aton"
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionName "${version_name}"
        versionCode Integer.parseInt(version_code)
        buildConfigField("int", "INNER_VERSION_NAME", "${inner_version_name}")
        buildConfigField("String", "RELEASE_TYPE", "${releaseTypeC}")
        buildConfigField("String", "URL_PLATON_NETWORK", "${URL_PLATON_NETWORK}")
        buildConfigField("String", "URL_MAIN_SERVER", "${URL_MAIN_SERVER}")
        buildConfigField("String", "URL_TEST_MAIN_SERVER", "${URL_TEST_MAIN_SERVER}")
        buildConfigField("String", "URL_TEST_SERVER", "${URL_TEST_SERVER}")
        buildConfigField("String", "URL_TEST_OUTER_SERVER", "${URL_TEST_OUTER_SERVER}")
        buildConfigField("String", "URL_DEVELOP_SERVER", "${URL_DEVELOP_SERVER}")
        buildConfigField("String", "ID_TEST_MAIN_CHAIN", "${ID_TEST_MAIN_CHAIN}")
        buildConfigField("String", "ID_MAIN_CHAIN", "${ID_MAIN_CHAIN}")
        buildConfigField("String", "ID_TEST_CHAIN", "${ID_TEST_CHAIN}")
        buildConfigField("String", "ID_DEVELOP_CHAIN", "${ID_DEVELOP_CHAIN}")
        buildConfigField("int", "QRCODE_VERSION_CODE", "${qrcode_version_code}")
        renderscriptTargetApi 19
        renderscriptSupportModeEnabled true
        resConfigs "zh", "en"

    }

    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }


    signingConfigs {

        debug {
            storeFile file('../extras/debug.keystore')
        }

        releaseC {
            storeFile file("../extras/aton.keystore")
            storePassword "platon123456"
            keyAlias "platon"
            keyPassword "platon123456"
            v2SigningEnabled false
        }

        releaseJC {
            storeFile file("/Users/jenkins/extras/aton.keystore")
            storePassword "platon123456"
            keyAlias "platon"
            keyPassword "platon123456"
            v2SigningEnabled false
        }

        releaseX {
            storeFile file("../extras/aton.keystore")
            storePassword "platon123456"
            keyAlias "platon"
            keyPassword "platon123456"
            v2SigningEnabled false
        }

        releaseJX {
            storeFile file("/Users/jenkins/extras/aton.keystore")
            storePassword "platon123456"
            keyAlias "platon"
            keyPassword "platon123456"
            v2SigningEnabled false
        }
    }

    buildTypes {
        debug {
            debuggable true
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField("String", "RELEASE_TYPE", "${releaseTypeC}")
            multiDexEnabled true
            testCoverageEnabled true  //打开覆盖率统计开关

            ndk {
                abiFilters 'armeabi-v7a', 'x86'
            }
        }

        releaseC {
            debuggable false
            signingConfig signingConfigs.releaseC
            shrinkResources true
            minifyEnabled true
            zipAlignEnabled true
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField("String", "RELEASE_TYPE", "${releaseTypeC}")
        }

        releaseJC {
            debuggable false
            signingConfig signingConfigs.releaseJC
            shrinkResources true
            minifyEnabled true
            zipAlignEnabled true
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField("String", "RELEASE_TYPE", "${releaseTypeC}")
        }

        releaseJOC {
            debuggable false
            signingConfig signingConfigs.releaseJC
            shrinkResources true
            minifyEnabled true
            zipAlignEnabled true
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField("String", "RELEASE_TYPE", "${releaseTypeOC}")
        }

        releaseX {
            debuggable false
            signingConfig signingConfigs.releaseX
            shrinkResources true
            minifyEnabled true
            zipAlignEnabled true
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField("String", "RELEASE_TYPE", "${releaseTypeX}")
        }

        releaseJX {
            debuggable false
            signingConfig signingConfigs.releaseJX
            shrinkResources true
            minifyEnabled true
            zipAlignEnabled true
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField("String", "RELEASE_TYPE", "${releaseTypeX}")
        }

        releaseTX {
            debuggable false
            signingConfig signingConfigs.releaseX
            shrinkResources true
            minifyEnabled true
            zipAlignEnabled true
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField("String", "RELEASE_TYPE", "${releaseTypeTX}")
        }

        releaseJTX {
            debuggable false
            signingConfig signingConfigs.releaseJX
            shrinkResources true
            minifyEnabled true
            zipAlignEnabled true
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField("String", "RELEASE_TYPE", "${releaseTypeTX}")
        }

        flavorDimensions "channel"

        productFlavors {

            PlatONNetwork {
                buildConfigField "String", "CHANNEL", '"PlatONNetwork"'

                ndk {
                    abiFilters 'armeabi-v7a', 'arm64-v8a', 'armeabi'
                }
            }

            GooglePlay {
                buildConfigField "String", "CHANNEL", '"GooglePlay"'

                ndk {
                    abiFilters 'armeabi-v7a', 'arm64-v8a', 'armeabi'
                }
            }

        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            def verName = android.defaultConfig.versionName
            def verCode = android.defaultConfig.versionCode
            def releaseTime = new Date().format("yyyyMMddHHmm")
            def gitVersion = getGitVersion();

            def type = ""
            if (variant.buildType.name == "releaseC" || variant.buildType.name == "releaseJC") {
                type = "c"
            } else if (variant.buildType.name == "releaseOC") {
                type = "oc"
            } else if (variant.buildType.name == "releaseX" || variant.buildType.name == "releaseJX" || variant.buildType.name == "releaseJTX") {
                type = "x_unjiagu"
            } else if (variant.buildType.name == "debug") {
                type = "debug"
                // 调试若使用实时时间戳会导致apk无法找到，因此，这里固定为0
                releaseTime = "0"
                gitVersion = "";
            }
            type = (type + "_" + variant.flavorName)

            outputFileName = "aton_android_v${verName}.${inner_version_name}_${releaseTime}_${verCode}_${type}_${gitVersion}.apk";
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

}


def getGitVersion() {
    return 'git rev-parse --short HEAD'.execute().text.trim()
}

repositories {
    maven {
        url "https://jitpack.io"
    }
}


dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':zxing')
    implementation project(':biometric')
    implementation project(':lib_common')
    implementation rootProject.ext.dependencies["butterknife"]
    annotationProcessor rootProject.ext.dependencies["butterknife-compiler"]
    //mockito
    testImplementation 'org.mockito:mockito-core:2.19.0'
    //powermock
    testImplementation 'org.powermock:powermock-module-junit4:1.7.4'
    testImplementation 'org.powermock:powermock-module-junit4-rule:1.7.4'
    testImplementation 'org.powermock:powermock-api-mockito2:1.7.4'
    testImplementation 'org.powermock:powermock-classloading-xstream:1.7.4'
    //robolectric
    testImplementation 'org.robolectric:robolectric:3.8'
    testImplementation 'org.robolectric:shadows-multidex:3.8'
    //    testImplementation 'org.robolectric:robolectric:3.8-SNAPSHOT'
    testImplementation 'org.robolectric:shadows-support-v4:3.0'
}




